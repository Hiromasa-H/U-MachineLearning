geom_point(mapping=aes(x=hwy,y=cyl))
?mpg
mpg
geom_point(mapping=aes(x=class,y=drv))
ggplot(data=mpg)+
geom_point(mapping=aes(x=class,y=drv))
ggplot(data=mpg)+
geom_point(mapping=aes(e=displ,y=hwy,color=class))
geom_point(mapping=aes(x=displ,y=hwy,color=class))
ggplot(data=mpg)+
+ geom_point(mapping=aes(x=displ,y=hwy,color=class))
ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy,color=class))
ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy,size=class))
ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy,alpha=class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue",shape=4)
ggplot(data = mpg) +
+     geom_point(mapping = aes(x = displ, y = hwy), color = "blue",shape=22)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue", shpae=22)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue",shape=22)
mpg
ggplot(data = mpg) +
+geom_point(mapping = aes(x = displ, y = hwy, shape = year))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = year))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = year))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class, shape=class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = year))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = cyl))
?geom_point
?ggplot2-specs
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = displ<5))
?funtoin
?function_name
??function_name
??ggplot
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = displ==5))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ,y=hwy))+
facet_wrap(~class,nrow=2)
?mpg
geom_point(mapping=aes(x=displ,y=hwy))+
ggplot(data = mpg) +
+     geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data=mpg)+
geom_point(mapping =aes(x=displ,y=hwy))+
facet_grid(drv ~ cyl)
ggplot(data=mpg)+
+ geom_point(mapping =aes(x=displ,y=hwy))+
+ facet_grid(drv ~ cyl)
ggplot(data=mpg)+
geom_point(mapping =aes(x=displ,y=hwy))+
facet_grid(. ~ cyl)
ggplot(data=mpg)+
geom_point(mapping =aes(x=displ,y=hwy))+
facet_grid(drv ~ year)
ggplot(data=mpg)+
geom_point(mapping =aes(x=displ,y=hwy))+
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 3)
?facet_wrap
ggplot(data = mpg) +
geom_line(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype=drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype=drv))+
geom_point(mapping = aes(x = displ, y = hwy, color
=drv))
ggplot(data = mpg) +
+     geom_smooth(mapping = aes(x = displ, y = hwy, linetype=drv, color=drv))+
+ geom_point(mapping = aes(x = displ, y = hwy, color
+                          =drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
?geom_smooth
ggplot(data = mpg) +
+     geom_h(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_hist(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_histogram(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_histogram(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_area(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = TRUE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(show.legend = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(show.legend = TRUE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(mapping=aes(show.legend = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(mapping=aes(show.legend = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(mapping=aes(show.legend = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(mapping=aes(show.legend=FALSE))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(mapping=aes())
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size=class) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(size=class) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(size=class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(size=class)) +
geom_smooth(mapping=aes(group=drive))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(size=class)) +
geom_smooth(mapping=aes(group=drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(size=class)) +
geom_smooth(mapping=aes(group=drv,show.legend=FALSE))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(size=class,show.legend=FALSE)) +
geom_smooth(mapping=aes(group=drv,show.legend=FALSE))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=class,show.legend=FALSE)) +
geom_smooth(mapping=aes(group=drv,show.legend=FALSE))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=class,show.legend=FALSE)) +
geom_smooth(mapping=aes(group=drv,color=drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=drv,show.legend=FALSE)) +
geom_smooth(mapping=aes(group=drv,color=drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=drv,show.legend=FALSE)) +
geom_smooth(mapping=aes(color=drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=drv)) +
geom_smooth(mapping=aes(color=drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=drv)) +
geom_smooth(mapping=aes))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=drv)) +
geom_smooth(mapping=aes)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=drv)) +
geom_smooth(mapping=aes())
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=drv)) +
geom_smooth(mapping=aes(se=FALSE))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=drv)) +
geom_smooth(se=FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=drv)) +
geom_smooth(se=FALSE,mapping=aes(linetype=drv))
geom_bar()
diamonds
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut))
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut, y=carat))
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=carat))
?geom_bar
this_is_a_really_long_name <- 2.5
this_is_a_really_long_name
this_is_a_really_long_name <- 3.5
this_is_a_really_long_name
seq(1,10)
seq(2,10)
seq(1,4)
seq(1,10,length.out=5)
( y <- seq(1,10,length.out=5))
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
fliter(mpg, cyl = 8)
filter(diamond, carat > 3)
diamonds
ï£¿
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(tidyverse)
nycflights13::flights
flights
install.package(c("nycflights13","gapminder","Lahman"))
install.packages(c("nycflights13","gapminder","Lahman"))
library(nycflights13)
library(tidyverse)
nycflights::flights
nycflights13::flights
Viewe(flights)
View(flights)
ggplot(data=flights)+
geombar(mapping=aes(x=carrier))
geom_bar(mapping=aes(x=carat))
ggplot(data=flights)+
geom_bar(mapping=aes(x=carrier))
geom_bar(mapping=aes(x=year),color=carrier)
ggplot(data=flights)+
geom_point(mapping=aes(x=year,color=carrier))
ggplot(data=flights)+
geom_point(mapping=aes(x=year,y=count,color=carrier))
filter(flights,month==6,day==6)
filter(flights,month==6,day==6,year=2014)
filter(flights,month==6,day==6,year==2014)
dataset = read.csv("Mall_Customers.csv")
setwd("~/Desktop/Udemy/Machine Learning A-Z/Machine Learning A-Z Mine/Part 4 - Clustering/Section 24 - K-Means Clustering")
setwd("~/Desktop/Udemy/Machine Learning A-Z/Machine Learning A-Z Mine/Part 4 - Clustering/Section 24 - K-Means Clustering")
dataset = read.csv("Mall_Customers.csv")
View(dataset)
X = dataset[,4:5]
View(X)
#elbow method
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type="b", main = paste("clusters of clients"), xlab = "number of clusters", ylab ="WCSS")
#elbow method
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type="b", main = paste("clusters of clients"), xlab = "number of clusters", ylab ="WCSS")
#elbow method
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type="b", main = paste("clusters of clients"), xlab = "number of clusters", ylab ="WCSS")
#elbow method
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type="b", main = paste("clusters of clients"), xlab = "number of clusters", ylab ="WCSS")
#elbow method
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type="b", main = paste("clusters of clients"), xlab = "number of clusters", ylab ="WCSS")
#elbow method
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type="b", main = paste("clusters of clients"), xlab = "number of clusters", ylab ="WCSS")
#elbow method
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type="b", main = paste("clusters of clients"), xlab = "number of clusters", ylab ="WCSS")
#elbow method
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type="b", main = paste("clusters of clients"), xlab = "number of clusters", ylab ="WCSS")
#elbow method
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type="b", main = paste("clusters of clients"), xlab = "number of clusters", ylab ="WCSS")
library(cluster)
clusplot(X,
kmeans$cluster,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
span = TRUE,
main = paste("clusters of clients"),
xlab = "annual income",
ylab = "spending score")
library(cluster)
clusplot(X,
kmeans$cluster,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
span = TRUE,
plotchar = FALSE,
main = paste("clusters of clients"),
xlab = "annual income",
ylab = "spending score")
# Using the elbow method to find the optimal number of clusters
set.seed(6)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(dataset, i)$withinss)
plot(1:10,
wcss,
type = 'b',
main = paste('The Elbow Method'),
xlab = 'Number of clusters',
ylab = 'WCSS')
set
set.seed(29)
kmeans = kmeans(x = dataset, centers = 5)
y_kmeans = kmeans$cluster
# Visualising the clusters
library(cluster)
clusplot(dataset,
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of customers'),
xlab = 'Annual Income',
ylab = 'Spending Score')
dataset = read.csv('Mall_Customers.csv')
dataset = dataset[4:5]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Using the elbow method to find the optimal number of clusters
set.seed(6)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(dataset, i)$withinss)
plot(1:10,
wcss,
type = 'b',
main = paste('The Elbow Method'),
xlab = 'Number of clusters',
ylab = 'WCSS')
# Fitting K-Means to the dataset
set.seed(29)
kmeans = kmeans(x = dataset, centers = 5)
y_kmeans = kmeans$cluster
library(cluster)
clusplot(dataset,
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of customers'),
xlab = 'Annual Income',
ylab = 'Spending Score')
#Hierarchical Clustering
dataset = read.csv("Mall_Customers.csv")
View(dataset)
View(dataset)
X = dataset[4:5]
View(X)
dendrogram = hclust(dist(X, method = "euclidean"), method = "ward.d")
plot(dendrogram,
main = paste("Dendrogram"),
xlab = "Customers",
ylab = "Euclidean distances")
dendrogram = hclust(dist(X, method = "euclidean"), method = "ward.D")
plot(dendrogram,
main = paste("Dendrogram"),
xlab = "Customers",
ylab = "Euclidean distances")
hc = hclust(dist(X, method = "euclidean"), method = "ward.D")
y_hc = cutree(hc, 5)
plot(y_hc,
main = paste("Dendrogram"),
xlab = "Customers",
ylab = "Euclidean distances")
library(cluster)
clusplot(X,
y_hc,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste("clusters of customers"),
xlab = "annual income",
ylab = "spending score")
library(cluster)
clusplot(X,
y_hc,
lines = 1,
shade = FALSE,
color = FALSE,
labels = 2,
plotchar = TRUE,
span = FALSE,
main = paste("clusters of customers"),
xlab = "annual income",
ylab = "spending score")
library(cluster)
clusplot(X,
y_hc,
lines = 1,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste("clusters of customers"),
xlab = "annual income",
ylab = "spending score")
setwd("~/Desktop/Udemy/Machine Learning A-Z/Machine Learning A-Z Mine/Part 5 - Association Rule Learning/Section 28 - Apriori")
dataset = read.csv("Market_Basket_Optimisation.csv")
View(dataset)
# data preprocessing
dataset = read.csv("Market_Basket_Optimisation.csv", header = "FALSE")
dataset = read.csv("Market_Basket_Optimisation.csv", header = FALSE)
install.packages("arules")
library(arules)
dataset = read.transactions("Market_Basket_Optimisation.csv", sep = ",",rm.duplicates = TRUE)
View(dataset)
summary(dataset)
itemFrequencyPlot(dataset,topN = 100)
rules = apriori(data = dataset, parameter = list(support = 0.003,confidence = 0.8 ))
rules = apriori(data = dataset, parameter = list(support = 0.003,confidence = 0.4 ))
#confidence is 0.8 by default
rules
inspect(sort(rules, by = "lift")[1:10])
rules = apriori(data = dataset, parameter = list(support = 0.003,confidence = 0.2 ))
#confidence is 0.8 by default
inspect(sort(rules, by = "lift")[1:10])
#this code makes sense but burned my brain
rules = apriori(data = dataset, parameter = list(support = 0.004,confidence = 0.2 ))
#confidence is 0.8 by default
inspect(sort(rules, by = "lift")[1:10])
#this code makes sense but burned my brain
setwd("~/Desktop/Udemy/Machine Learning A-Z/Machine Learning A-Z Mine/Part 5 - Association Rule Learning/Section 29 - Eclat")
library(arules)
dataset = read.transactions("Market_Basket_Optimisation.csv", sep = ",",rm.duplicates = TRUE)
summary(dataset)
sprt = 4*7/7500=0.0037
rules = eclat(data = dataset, parameter = list(support = sprt, minlen = 2))
sprt = 4*7/7500
rules = eclat(data = dataset, parameter = list(support = sprt, minlen = 2))
inspect(sort(rules, by = "support")[1:10])
q("yes")
